'use client';

import { useState } from 'react';
import {
  Smile,
  Image as ImageIcon,
  Send,
  Hash,
} from 'lucide-react';

const channelsData = {
  general: [
    {
      id: 1,
      name: 'Har',
      time: '4/17/25, 11:30 PM',
      text: 'mabar',
      reactions: { '👍': 1 },
    },
  ],
  random: [
    {
      id: 1,
      name: 'zaffnzn',
      time: '4/17/25, 11:33 PM',
      text: 'GAS RIS',
      reactions: { '🔥': 1 },
    },
  ],
  funny: [
    {
      id: 1,
      name: 'zaffnzn',
      time: '4/21/25, 1:38 AM',
      text: 'pink cigarettes-bungalow sumth',
      reactions: {},
    },
  ],
};

export default function DiskusiPage() {
  const [channels, setChannels] = useState(channelsData);
  const [selectedChannel, setSelectedChannel] = useState('general');
  const [message, setMessage] = useState('');

  const messages = channels[selectedChannel];

  const sendMessage = () => {
    if (!message.trim()) return;

    const newMessage = {
      id: messages.length + 1,
      name: 'You',
      time: new Date().toLocaleString(),
      text: message,
      reactions: {},
    };

    setChannels((prev) => ({
      ...prev,
      [selectedChannel]: [...prev[selectedChannel], newMessage],
    }));

    setMessage('');
  };

  const toggleReaction = (msgId, emoji) => {
    setChannels((prev) => ({
      ...prev,
      [selectedChannel]: prev[selectedChannel].map((msg) =>
        msg.id !== msgId
          ? msg
          : {
              ...msg,
              reactions: {
                ...msg.reactions,
                [emoji]: msg.reactions?.[emoji] ? undefined : 1,
              },
            }
      ),
    }));
  };

  return (
    <div className="flex flex-col h-screen bg-[#EAF0FA] text-black font-sans">
      {/* Header */}
      <div className="flex items-center justify-between px-6 py-4 bg-white/60 backdrop-blur-md border-b border-[#F2BF27] sticky top-0 z-10">
        <div className="flex items-center gap-3">
          {['general', 'random', 'funny'].map((channel) => (
            <button
              key={channel}
              onClick={() => setSelectedChannel(channel)}
              className={`flex items-center gap-1 px-3 py-1 rounded-md text-sm font-medium transition ${
                selectedChannel === channel
                  ? 'bg-[#3061F2] text-white'
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              <Hash className="w-4 h-4" />
              {channel}
            </button>
          ))}
        </div>

        <input
          type="text"
          placeholder="Search"
          className="bg-white text-sm px-3 py-1 rounded-md border border-[#F2BF27] shadow-sm focus:outline-none"
        />
      </div>

      {/* Message Feed */}
      <div className="flex-1 overflow-y-auto px-6 py-6 space-y-5">
        {messages.map((msg) => (
          <div
            key={msg.id}
            className="flex flex-col gap-2 bg-white rounded-xl shadow p-4 hover:shadow-md transition"
          >
            <div className="flex items-start gap-4">
              {/* Avatar */}
              <div className="w-10 h-10 rounded-full bg-[#F28907] flex items-center justify-center font-bold text-white text-sm uppercase shadow">
                {msg.name
                  .split(' ')
                  .map((n) => n[0])
                  .join('')
                  .slice(0, 2)}
              </div>

              {/* Content */}
              <div>
                <p className="text-sm text-gray-500 mb-1">
                  <span className="font-semibold text-black">{msg.name}</span> · {msg.time}
                </p>
                <p className="text-gray-800">{msg.text}</p>
              </div>
            </div>

            {/* Emoji Reactions */}
            <div className="flex gap-2 pl-14 pt-1">
              {['👍', '😂', '🔥'].map((emoji) => (
                <button
                  key={emoji}
                  onClick={() => toggleReaction(msg.id, emoji)}
                  className={`flex items-center gap-1 text-sm px-2 py-1 rounded-full border transition ${
                    msg.reactions?.[emoji]
                      ? 'bg-[#3061F2] text-white border-[#3061F2]'
                      : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'
                  }`}
                >
                  {emoji}
                  {msg.reactions?.[emoji] ? <span>{msg.reactions[emoji]}</span> : null}
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>

      {/* Message Input */}
      <div className="bg-white/80 backdrop-blur-md px-6 py-4 border-t border-[#F2BF27]">
        <div className="flex items-center gap-3">
          <button className="text-[#3061F2] hover:text-[#F2780C] transition">
            <ImageIcon className="w-5 h-5" />
          </button>
          <button className="text-[#3061F2] hover:text-[#F2780C] transition">
            <Smile className="w-5 h-5" />
          </button>
          <input
            type="text"
            placeholder={`Message #${selectedChannel}`}
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            className="flex-1 px-4 py-2 text-sm rounded-lg border border-gray-300 bg-white focus:outline-none focus:ring-2 focus:ring-[#27A4F2]"
          />
          <button
            onClick={sendMessage}
            className="bg-[#3061F2] hover:bg-[#27A4F2] text-white p-2 rounded-lg transition"
          >
            <Send className="w-5 h-5" />
          </button>
        </div>
      </div>
    </div>
  );
}
